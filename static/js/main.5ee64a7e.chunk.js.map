{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","username","email","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","resonse","json","users","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAqBeA,EAnBF,SAACC,GACb,OACC,yBAAKC,UAAU,uDAEd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAAMI,MAEtD,6BACC,gCAAOJ,EAAMK,KAAb,KACA,+BAAI,gCAAUL,EAAMI,GAAhB,MACJ,+BAAI,gCAAUJ,EAAMM,WACpB,+BAAI,gCAAUN,EAAMO,OAApB,QCYWC,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnB,OACC,6BAEKA,EAAOC,KAAI,SAACC,EAAKC,GACrB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdC,KAAMI,EAAOG,GAAGP,KAChBC,SAAUG,EAAOG,GAAGN,SACpBC,MAAOE,EAAOG,GAAGL,aCFNO,EAXG,SAAC,GAAgC,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKf,UAAY,SAChB,2BAAOA,UAAU,mCAAmCgB,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCM5FI,EATA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAAEC,UAAW,SAAUC,OAAO,UACxCvB,EAAMwB,WCiBKC,E,kDAnBd,WAAYzB,GAAO,IAAD,8BACjB,cAAMA,IACD0B,MAAM,CACVC,UAAU,GAHM,E,8DAOAC,EAAMC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,mEAEDG,KAAK9B,MAAMwB,a,GAhBQQ,aCoDbC,G,wDA7Cd,aAAc,IAAD,8BACZ,gBAkBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEhB,YAAYoB,EAAMC,OAAOC,SAlBzC,EAAKX,MAAQ,CACZjB,OAAO,GACPM,YAAc,IAJH,E,gEAQO,IAAD,OAClBuB,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAAQC,UAEfF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAAEtB,OAAOiC,S,+BAUf,IAAD,OACFC,EAAiBb,KAAKJ,MAAMjB,OAAOmC,QAAO,SAAAC,GAChD,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKrB,MAAMX,YAAY+B,kBAEhE,OACA,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAcc,KAAKI,iBAC9B,6BACA,kBAAC,EAAD,KACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUzB,OAAWkC,W,GApCPX,cCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.5ee64a7e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn(\r\n\t\t<div className='bg-light-green dib br3 pa1 ma2 grow bw2 shadow-5 tc'>\r\n\t\t\r\n\t\t\t<img alt='photos' src= {`https://robohash.org/${props.id}`} />\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<h2> { props.name } </h2>\r\n\t\t\t\t<p> <strong>{ props.id } </strong></p>\r\n\t\t\t\t<p> <strong>{ props.username }</strong></p>\r\n\t\t\t\t<p> <strong>{ props.email }</strong> </p> \r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\r\n\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t  \r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n     \t\trobots.map((user,i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\tusername={robots[i].username} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t</div>\r\n);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField,searchChange}) => {\r\n\treturn(\r\n\t\t<div className = 'pa0.5'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots' onChange={searchChange}/>\r\n\t\t\t\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{ overflowY: 'scroll', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1> Oooops! There is somegthing wrong.</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary'\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchField : ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(resonse=>{\r\n\t\t\treturn resonse.json();\r\n\t\t})\r\n\t\t.then(users=>{\r\n\t\t\tthis.setState({ robots:users })\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchField:event.target.value })\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<hr></hr>\r\n\t\t\t<Scroll>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<CardList robots = { filteredRobots }/>\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t</div>\t\r\n\t\t\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n \t\t<App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}